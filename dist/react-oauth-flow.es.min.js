import { Children, Component, createElement } from 'react';

function createCommonjsModule(fn, module) {
  return (module = { exports: {} }), fn(module, module.exports), module.exports;
}

var utils = createCommonjsModule(function(module, exports) {
  var has = Object.prototype.hasOwnProperty;

  var hexTable = (function() {
    var array = [];
    for (var i = 0; i < 256; ++i) {
      array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
    }

    return array;
  })();

  var compactQueue = function compactQueue(queue) {
    var obj;

    while (queue.length) {
      var item = queue.pop();
      obj = item.obj[item.prop];

      if (Array.isArray(obj)) {
        var compacted = [];

        for (var j = 0; j < obj.length; ++j) {
          if (typeof obj[j] !== 'undefined') {
            compacted.push(obj[j]);
          }
        }

        item.obj[item.prop] = compacted;
      }
    }

    return obj;
  };

  exports.arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
      if (typeof source[i] !== 'undefined') {
        obj[i] = source[i];
      }
    }

    return obj;
  };

  exports.merge = function merge(target, source, options) {
    if (!source) {
      return target;
    }

    if (typeof source !== 'object') {
      if (Array.isArray(target)) {
        target.push(source);
      } else if (typeof target === 'object') {
        if (
          options.plainObjects ||
          options.allowPrototypes ||
          !has.call(Object.prototype, source)
        ) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }

      return target;
    }

    if (typeof target !== 'object') {
      return [target].concat(source);
    }

    var mergeTarget = target;
    if (Array.isArray(target) && !Array.isArray(source)) {
      mergeTarget = exports.arrayToObject(target, options);
    }

    if (Array.isArray(target) && Array.isArray(source)) {
      source.forEach(function(item, i) {
        if (has.call(target, i)) {
          if (target[i] && typeof target[i] === 'object') {
            target[i] = exports.merge(target[i], item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i] = item;
        }
      });
      return target;
    }

    return Object.keys(source).reduce(function(acc, key) {
      var value = source[key];

      if (has.call(acc, key)) {
        acc[key] = exports.merge(acc[key], value, options);
      } else {
        acc[key] = value;
      }
      return acc;
    }, mergeTarget);
  };

  exports.assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };

  exports.decode = function(str) {
    try {
      return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
      return str;
    }
  };

  exports.encode = function encode(str) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) {
      return str;
    }

    var string = typeof str === 'string' ? str : String(str);

    var out = '';
    for (var i = 0; i < string.length; ++i) {
      var c = string.charCodeAt(i);

      if (
        c === 0x2d || // -
        c === 0x2e || // .
        c === 0x5f || // _
        c === 0x7e || // ~
        (c >= 0x30 && c <= 0x39) || // 0-9
        (c >= 0x41 && c <= 0x5a) || // a-z
        (c >= 0x61 && c <= 0x7a) // A-Z
      ) {
        out += string.charAt(i);
        continue;
      }

      if (c < 0x80) {
        out = out + hexTable[c];
        continue;
      }

      if (c < 0x800) {
        out = out + (hexTable[0xc0 | (c >> 6)] + hexTable[0x80 | (c & 0x3f)]);
        continue;
      }

      if (c < 0xd800 || c >= 0xe000) {
        out =
          out +
          (hexTable[0xe0 | (c >> 12)] +
            hexTable[0x80 | ((c >> 6) & 0x3f)] +
            hexTable[0x80 | (c & 0x3f)]);
        continue;
      }

      i += 1;
      c = 0x10000 + (((c & 0x3ff) << 10) | (string.charCodeAt(i) & 0x3ff));
      out +=
        hexTable[0xf0 | (c >> 18)] +
        hexTable[0x80 | ((c >> 12) & 0x3f)] +
        hexTable[0x80 | ((c >> 6) & 0x3f)] +
        hexTable[0x80 | (c & 0x3f)];
    }

    return out;
  };

  exports.compact = function compact(value) {
    var queue = [{ obj: { o: value }, prop: 'o' }];
    var refs = [];

    for (var i = 0; i < queue.length; ++i) {
      var item = queue[i];
      var obj = item.obj[item.prop];

      var keys = Object.keys(obj);
      for (var j = 0; j < keys.length; ++j) {
        var key = keys[j];
        var val = obj[key];
        if (
          typeof val === 'object' &&
          val !== null &&
          refs.indexOf(val) === -1
        ) {
          queue.push({ obj: obj, prop: key });
          refs.push(val);
        }
      }
    }

    return compactQueue(queue);
  };

  exports.isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
  };

  exports.isBuffer = function isBuffer(obj) {
    if (obj === null || typeof obj === 'undefined') {
      return false;
    }

    return !!(
      obj.constructor &&
      obj.constructor.isBuffer &&
      obj.constructor.isBuffer(obj)
    );
  };
});

var utils_1 = utils.arrayToObject;
var utils_2 = utils.merge;
var utils_3 = utils.assign;
var utils_4 = utils.decode;
var utils_5 = utils.encode;
var utils_6 = utils.compact;
var utils_7 = utils.isRegExp;
var utils_8 = utils.isBuffer;

var replace = String.prototype.replace;
var percentTwenties = /%20/g;

var formats = {
  default: 'RFC3986',
  formatters: {
    RFC1738: function(value) {
      return replace.call(value, percentTwenties, '+');
    },
    RFC3986: function(value) {
      return value;
    },
  },
  RFC1738: 'RFC1738',
  RFC3986: 'RFC3986',
};

var arrayPrefixGenerators = {
  brackets: function brackets(prefix) {
    // eslint-disable-line func-name-matching
    return prefix + '[]';
  },
  indices: function indices(prefix, key) {
    // eslint-disable-line func-name-matching
    return prefix + '[' + key + ']';
  },
  repeat: function repeat(prefix) {
    // eslint-disable-line func-name-matching
    return prefix;
  },
};

var toISO = Date.prototype.toISOString;

var defaults = {
  delimiter: '&',
  encode: true,
  encoder: utils.encode,
  encodeValuesOnly: false,
  serializeDate: function serializeDate(date) {
    // eslint-disable-line func-name-matching
    return toISO.call(date);
  },
  skipNulls: false,
  strictNullHandling: false,
};

var stringify = function stringify( // eslint-disable-line func-name-matching
  object,
  prefix,
  generateArrayPrefix,
  strictNullHandling,
  skipNulls,
  encoder,
  filter,
  sort,
  allowDots,
  serializeDate,
  formatter,
  encodeValuesOnly,
) {
  var obj = object;
  if (typeof filter === 'function') {
    obj = filter(prefix, obj);
  } else if (obj instanceof Date) {
    obj = serializeDate(obj);
  } else if (obj === null) {
    if (strictNullHandling) {
      return encoder && !encodeValuesOnly
        ? encoder(prefix, defaults.encoder)
        : prefix;
    }

    obj = '';
  }

  if (
    typeof obj === 'string' ||
    typeof obj === 'number' ||
    typeof obj === 'boolean' ||
    utils.isBuffer(obj)
  ) {
    if (encoder) {
      var keyValue = encodeValuesOnly
        ? prefix
        : encoder(prefix, defaults.encoder);
      return [
        formatter(keyValue) + '=' + formatter(encoder(obj, defaults.encoder)),
      ];
    }
    return [formatter(prefix) + '=' + formatter(String(obj))];
  }

  var values = [];

  if (typeof obj === 'undefined') {
    return values;
  }

  var objKeys;
  if (Array.isArray(filter)) {
    objKeys = filter;
  } else {
    var keys = Object.keys(obj);
    objKeys = sort ? keys.sort(sort) : keys;
  }

  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];

    if (skipNulls && obj[key] === null) {
      continue;
    }

    if (Array.isArray(obj)) {
      values = values.concat(
        stringify(
          obj[key],
          generateArrayPrefix(prefix, key),
          generateArrayPrefix,
          strictNullHandling,
          skipNulls,
          encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          formatter,
          encodeValuesOnly,
        ),
      );
    } else {
      values = values.concat(
        stringify(
          obj[key],
          prefix + (allowDots ? '.' + key : '[' + key + ']'),
          generateArrayPrefix,
          strictNullHandling,
          skipNulls,
          encoder,
          filter,
          sort,
          allowDots,
          serializeDate,
          formatter,
          encodeValuesOnly,
        ),
      );
    }
  }

  return values;
};

var stringify_1 = function(object, opts) {
  var obj = object;
  var options = opts ? utils.assign({}, opts) : {};

  if (
    options.encoder !== null &&
    options.encoder !== undefined &&
    typeof options.encoder !== 'function'
  ) {
    throw new TypeError('Encoder has to be a function.');
  }

  var delimiter =
    typeof options.delimiter === 'undefined'
      ? defaults.delimiter
      : options.delimiter;
  var strictNullHandling =
    typeof options.strictNullHandling === 'boolean'
      ? options.strictNullHandling
      : defaults.strictNullHandling;
  var skipNulls =
    typeof options.skipNulls === 'boolean'
      ? options.skipNulls
      : defaults.skipNulls;
  var encode =
    typeof options.encode === 'boolean' ? options.encode : defaults.encode;
  var encoder =
    typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
  var sort = typeof options.sort === 'function' ? options.sort : null;
  var allowDots =
    typeof options.allowDots === 'undefined' ? false : options.allowDots;
  var serializeDate =
    typeof options.serializeDate === 'function'
      ? options.serializeDate
      : defaults.serializeDate;
  var encodeValuesOnly =
    typeof options.encodeValuesOnly === 'boolean'
      ? options.encodeValuesOnly
      : defaults.encodeValuesOnly;
  if (typeof options.format === 'undefined') {
    options.format = formats['default'];
  } else if (
    !Object.prototype.hasOwnProperty.call(formats.formatters, options.format)
  ) {
    throw new TypeError('Unknown format option provided.');
  }
  var formatter = formats.formatters[options.format];
  var objKeys;
  var filter;

  if (typeof options.filter === 'function') {
    filter = options.filter;
    obj = filter('', obj);
  } else if (Array.isArray(options.filter)) {
    filter = options.filter;
    objKeys = filter;
  }

  var keys = [];

  if (typeof obj !== 'object' || obj === null) {
    return '';
  }

  var arrayFormat;
  if (options.arrayFormat in arrayPrefixGenerators) {
    arrayFormat = options.arrayFormat;
  } else if ('indices' in options) {
    arrayFormat = options.indices ? 'indices' : 'repeat';
  } else {
    arrayFormat = 'indices';
  }

  var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];

  if (!objKeys) {
    objKeys = Object.keys(obj);
  }

  if (sort) {
    objKeys.sort(sort);
  }

  for (var i = 0; i < objKeys.length; ++i) {
    var key = objKeys[i];

    if (skipNulls && obj[key] === null) {
      continue;
    }

    keys = keys.concat(
      stringify(
        obj[key],
        key,
        generateArrayPrefix,
        strictNullHandling,
        skipNulls,
        encode ? encoder : null,
        filter,
        sort,
        allowDots,
        serializeDate,
        formatter,
        encodeValuesOnly,
      ),
    );
  }

  var joined = keys.join(delimiter);
  var prefix = options.addQueryPrefix === true ? '?' : '';

  return joined.length > 0 ? prefix + joined : '';
};

var has = Object.prototype.hasOwnProperty;

var defaults$1 = {
  allowDots: false,
  allowPrototypes: false,
  arrayLimit: 20,
  decoder: utils.decode,
  delimiter: '&',
  depth: 5,
  parameterLimit: 1000,
  plainObjects: false,
  strictNullHandling: false,
};

var parseValues = function parseQueryStringValues(str, options) {
  var obj = {};
  var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
  var limit =
    options.parameterLimit === Infinity ? undefined : options.parameterLimit;
  var parts = cleanStr.split(options.delimiter, limit);

  for (var i = 0; i < parts.length; ++i) {
    var part = parts[i];

    var bracketEqualsPos = part.indexOf(']=');
    var pos =
      bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

    var key, val;
    if (pos === -1) {
      key = options.decoder(part, defaults$1.decoder);
      val = options.strictNullHandling ? null : '';
    } else {
      key = options.decoder(part.slice(0, pos), defaults$1.decoder);
      val = options.decoder(part.slice(pos + 1), defaults$1.decoder);
    }
    if (has.call(obj, key)) {
      obj[key] = [].concat(obj[key]).concat(val);
    } else {
      obj[key] = val;
    }
  }

  return obj;
};

var parseObject = function(chain, val, options) {
  var leaf = val;

  for (var i = chain.length - 1; i >= 0; --i) {
    var obj;
    var root = chain[i];

    if (root === '[]') {
      obj = [];
      obj = obj.concat(leaf);
    } else {
      obj = options.plainObjects ? Object.create(null) : {};
      var cleanRoot =
        root.charAt(0) === '[' && root.charAt(root.length - 1) === ']'
          ? root.slice(1, -1)
          : root;
      var index = parseInt(cleanRoot, 10);
      if (
        !isNaN(index) &&
        root !== cleanRoot &&
        String(index) === cleanRoot &&
        index >= 0 &&
        (options.parseArrays && index <= options.arrayLimit)
      ) {
        obj = [];
        obj[index] = leaf;
      } else {
        obj[cleanRoot] = leaf;
      }
    }

    leaf = obj;
  }

  return leaf;
};

var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
  if (!givenKey) {
    return;
  }

  // Transform dot notation to bracket notation
  var key = options.allowDots
    ? givenKey.replace(/\.([^.[]+)/g, '[$1]')
    : givenKey;

  // The regex chunks

  var brackets = /(\[[^[\]]*])/;
  var child = /(\[[^[\]]*])/g;

  // Get the parent

  var segment = brackets.exec(key);
  var parent = segment ? key.slice(0, segment.index) : key;

  // Stash the parent if it exists

  var keys = [];
  if (parent) {
    // If we aren't using plain objects, optionally prefix keys
    // that would overwrite object prototype properties
    if (!options.plainObjects && has.call(Object.prototype, parent)) {
      if (!options.allowPrototypes) {
        return;
      }
    }

    keys.push(parent);
  }

  // Loop through children appending to the array until we hit depth

  var i = 0;
  while ((segment = child.exec(key)) !== null && i < options.depth) {
    i += 1;
    if (
      !options.plainObjects &&
      has.call(Object.prototype, segment[1].slice(1, -1))
    ) {
      if (!options.allowPrototypes) {
        return;
      }
    }
    keys.push(segment[1]);
  }

  // If there's a remainder, just add whatever is left

  if (segment) {
    keys.push('[' + key.slice(segment.index) + ']');
  }

  return parseObject(keys, val, options);
};

var parse = function(str, opts) {
  var options = opts ? utils.assign({}, opts) : {};

  if (
    options.decoder !== null &&
    options.decoder !== undefined &&
    typeof options.decoder !== 'function'
  ) {
    throw new TypeError('Decoder has to be a function.');
  }

  options.ignoreQueryPrefix = options.ignoreQueryPrefix === true;
  options.delimiter =
    typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter)
      ? options.delimiter
      : defaults$1.delimiter;
  options.depth =
    typeof options.depth === 'number' ? options.depth : defaults$1.depth;
  options.arrayLimit =
    typeof options.arrayLimit === 'number'
      ? options.arrayLimit
      : defaults$1.arrayLimit;
  options.parseArrays = options.parseArrays !== false;
  options.decoder =
    typeof options.decoder === 'function'
      ? options.decoder
      : defaults$1.decoder;
  options.allowDots =
    typeof options.allowDots === 'boolean'
      ? options.allowDots
      : defaults$1.allowDots;
  options.plainObjects =
    typeof options.plainObjects === 'boolean'
      ? options.plainObjects
      : defaults$1.plainObjects;
  options.allowPrototypes =
    typeof options.allowPrototypes === 'boolean'
      ? options.allowPrototypes
      : defaults$1.allowPrototypes;
  options.parameterLimit =
    typeof options.parameterLimit === 'number'
      ? options.parameterLimit
      : defaults$1.parameterLimit;
  options.strictNullHandling =
    typeof options.strictNullHandling === 'boolean'
      ? options.strictNullHandling
      : defaults$1.strictNullHandling;

  if (str === '' || str === null || typeof str === 'undefined') {
    return options.plainObjects ? Object.create(null) : {};
  }

  var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
  var obj = options.plainObjects ? Object.create(null) : {};

  // Iterate over the keys and setup the new object

  var keys = Object.keys(tempObj);
  for (var i = 0; i < keys.length; ++i) {
    var key = keys[i];
    var newObj = parseKeys(key, tempObj[key], options);
    obj = utils.merge(obj, newObj, options);
  }

  return utils.compact(obj);
};

var lib = {
  formats: formats,
  parse: parse,
  stringify: stringify_1,
};

function buildURL(url, params, paramsSerializer) {
  if (params == null) return url;

  var serializedParams = void 0;

  if (paramsSerializer != null) {
    serializedParams = paramsSerializer(params);
  } else {
    serializedParams = lib.stringify(params);
  }

  if (!serializedParams) return url;
  return '' + url + (url.indexOf('?') < 0 ? '?' : '&') + serializedParams;
}

var asyncToGenerator = function(fn) {
  return function() {
    var gen = fn.apply(this, arguments);
    return new Promise(function(resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return Promise.resolve(value).then(
            function(value) {
              step('next', value);
            },
            function(err) {
              step('throw', err);
            },
          );
        }
      }

      return step('next');
    });
  };
};

var classCallCheck = function(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
};

var createClass = (function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ('value' in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function(Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
})();

var _extends =
  Object.assign ||
  function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

var inherits = function(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError(
      'Super expression must either be null or a function, not ' +
        typeof superClass,
    );
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true,
    },
  });
  if (superClass)
    Object.setPrototypeOf
      ? Object.setPrototypeOf(subClass, superClass)
      : (subClass.__proto__ = superClass);
};

var possibleConstructorReturn = function(self, call) {
  if (!self) {
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called",
    );
  }

  return call && (typeof call === 'object' || typeof call === 'function')
    ? call
    : self;
};

var fetch = (function() {
  var _ref = asyncToGenerator(
    /*#__PURE__*/ regeneratorRuntime.mark(function _callee(url, opts) {
      var res, json;
      return regeneratorRuntime.wrap(
        function _callee$(_context) {
          while (1) {
            switch ((_context.prev = _context.next)) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return window.fetch(url, opts);

              case 3:
                res = _context.sent;

                if (!(res.status < 200 || res.status > 299)) {
                  _context.next = 6;
                  break;
                }

                throw new Error(res.statusText);

              case 6:
                _context.next = 8;
                return res.json();

              case 8:
                json = _context.sent;
                return _context.abrupt('return', json);

              case 12:
                _context.prev = 12;
                _context.t0 = _context['catch'](0);
                throw _context.t0;

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        },
        _callee,
        this,
        [[0, 12]],
      );
    }),
  );

  return function fetch(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

var OauthReceiver = (function(_React$Component) {
  inherits(OauthReceiver, _React$Component);

  function OauthReceiver() {
    var _ref,
      _this2 = this;

    var _temp, _this, _ret;

    classCallCheck(this, OauthReceiver);

    for (
      var _len = arguments.length, args = Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    return (
      (_ret = ((_temp = ((_this = possibleConstructorReturn(
        this,
        (_ref =
          OauthReceiver.__proto__ ||
          Object.getPrototypeOf(OauthReceiver)).call.apply(
          _ref,
          [this].concat(args),
        ),
      )),
      _this)),
      (_this.state = {
        processing: true,
        state: null,
        error: null,
      }),
      (_this.getAuthorizationCode = asyncToGenerator(
        /*#__PURE__*/ regeneratorRuntime.mark(function _callee() {
          var _this$props,
            baseUrl,
            clientId,
            clientSecret,
            redirectUri,
            tokenEndpoint,
            onAuthSuccess,
            _this$parseQuerystrin,
            _error,
            error_description,
            code,
            _state,
            err,
            url,
            response,
            accessToken;

          return regeneratorRuntime.wrap(
            function _callee$(_context) {
              while (1) {
                switch ((_context.prev = _context.next)) {
                  case 0:
                    _context.prev = 0;
                    (_this$props = _this.props),
                      (baseUrl = _this$props.baseUrl),
                      (clientId = _this$props.clientId),
                      (clientSecret = _this$props.clientSecret),
                      (redirectUri = _this$props.redirectUri),
                      (tokenEndpoint = _this$props.tokenEndpoint),
                      (onAuthSuccess = _this$props.onAuthSuccess);
                    (_this$parseQuerystrin = _this.parseQuerystring()),
                      (_error = _this$parseQuerystrin.error),
                      (error_description =
                        _this$parseQuerystrin.error_description),
                      (code = _this$parseQuerystrin.code),
                      (_state = _this$parseQuerystrin.state);

                    _this.setState(function() {
                      return { state: _state };
                    });

                    if (!(_error != null)) {
                      _context.next = 7;
                      break;
                    }

                    err = new Error(error_description);
                    throw err;

                  case 7:
                    url = buildURL('' + baseUrl + tokenEndpoint, {
                      code: code,
                      grant_type: 'authorization_code',
                      client_id: clientId,
                      client_secret: clientSecret,
                      redirect_uri: redirectUri,
                    });
                    _context.next = 10;
                    return fetch(url, { method: 'POST' });

                  case 10:
                    response = _context.sent;
                    accessToken = response.access_token;

                    if (typeof onAuthSuccess === 'function') {
                      onAuthSuccess(accessToken, response);
                    }

                    _this.setState(function() {
                      return { processing: false };
                    });
                    _context.next = 19;
                    break;

                  case 16:
                    _context.prev = 16;
                    _context.t0 = _context['catch'](0);

                    _this.handleError(_context.t0);

                  case 19:
                  case 'end':
                    return _context.stop();
                }
              }
            },
            _callee,
            _this2,
            [[0, 16]],
          );
        }),
      )),
      (_this.handleError = function(error) {
        var onAuthError = _this.props.onAuthError;

        _this.setState(function() {
          return { error: error };
        });
        if (typeof onAuthError === 'function') {
          onAuthError(error);
        }
      }),
      (_this.parseQuerystring = function() {
        var _this$props2 = _this.props,
          location = _this$props2.location,
          querystring = _this$props2.querystring;

        var search = void 0;

        if (location != null) {
          search = location.search; // eslint-disable-line
        } else if (querystring != null) {
          search = querystring;
        } else {
          search = window.location.search; // eslint-disable-line
        }

        return lib.parse(search);
      }),
      _temp)),
      possibleConstructorReturn(_this, _ret)
    );
  }

  createClass(OauthReceiver, [
    {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.getAuthorizationCode();
      },
    },
    {
      key: 'render',
      value: function render() {
        var _props = this.props,
          component = _props.component,
          render = _props.render,
          children = _props.children;
        var _state2 = this.state,
          processing = _state2.processing,
          state = _state2.state,
          error = _state2.error;

        if (component != null) {
          return createElement(component, {
            processing: processing,
            state: state,
            error: error,
          });
        }

        if (render != null) {
          return render({ processing: processing, state: state, error: error });
        }

        if (children != null) {
          Children.only(children);
          return children({
            processing: processing,
            state: state,
            error: error,
          });
        }

        return null;
      },
    },
  ]);
  return OauthReceiver;
})(Component);
OauthReceiver.defaultProps = {
  tokenEndpoint: '/oauth2/token',
};

var OauthSender = (function(_React$Component) {
  inherits(OauthSender, _React$Component);

  function OauthSender() {
    classCallCheck(this, OauthSender);
    return possibleConstructorReturn(
      this,
      (OauthSender.__proto__ || Object.getPrototypeOf(OauthSender)).apply(
        this,
        arguments,
      ),
    );
  }

  createClass(OauthSender, [
    {
      key: 'render',
      value: function render() {
        var _props = this.props,
          baseUrl = _props.baseUrl,
          clientId = _props.clientId,
          redirectUri = _props.redirectUri,
          authorizeEndpoint = _props.authorizeEndpoint,
          state = _props.state,
          args = _props.args,
          render = _props.render,
          component = _props.component,
          children = _props.children;

        var url = buildURL('' + baseUrl + authorizeEndpoint, {
          client_id: clientId,
          redirect_uri: redirectUri,
          state: state || {},
          args: args || {},
        });

        if (component != null) {
          return createElement(component, { url: url });
        }

        if (render != null) {
          return render({ url: url });
        }

        if (children != null) {
          Children.only(children);
          return children({ url: url });
        }

        return null;
      },
    },
  ]);
  return OauthSender;
})(Component);
OauthSender.defaultProps = {
  authorizeEndpoint: '/oauth2/authorize',
};

function createOauthFlow() {
  var _ref =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    baseUrl = _ref.baseUrl,
    clientId = _ref.clientId,
    clientSecret = _ref.clientSecret,
    redirectUri = _ref.redirectUri,
    _ref$authorizeEndpoin = _ref.authorizeEndpoint,
    authorizeEndpoint =
      _ref$authorizeEndpoin === undefined
        ? '/oauth2/authorize'
        : _ref$authorizeEndpoin,
    _ref$tokenEndpoint = _ref.tokenEndpoint,
    tokenEndpoint =
      _ref$tokenEndpoint === undefined ? '/oauth2/token' : _ref$tokenEndpoint;

  var Sender = function Sender(props) {
    return createElement(
      OauthSender,
      _extends(
        {
          baseUrl: baseUrl,
          clientId: clientId,
          redirectUri: redirectUri,
          authorizeEndpoint: authorizeEndpoint,
        },
        props,
      ),
    );
  };

  var Receiver = function Receiver(props) {
    return createElement(
      OauthReceiver,
      _extends(
        {
          baseUrl: baseUrl,
          clientId: clientId,
          clientSecret: clientSecret,
          redirectUri: redirectUri,
          tokenEndpoint: tokenEndpoint,
        },
        props,
      ),
    );
  };

  return {
    Sender: Sender,
    Receiver: Receiver,
  };
}

export { createOauthFlow, OauthSender, OauthReceiver };
